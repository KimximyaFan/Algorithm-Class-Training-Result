/*
제일 빠른 end 시간 판별할 때
우선순위 큐를 이용한다.
*/

import java.io.*;
import java.util.*;

public class AAIH 
{
	public static class Work implements Comparable<Work>
	{
		public int s, e;
		
		Work () {}
		Work (int s, int e) { this.s = s; this.e = e;}
		
		public int compareTo(Work o)
		{
			if ( this.s > o.s )
				return 1;
			else if ( this.s == o.s )
				return 0;
			else
				return -1;
		}
	}
	
	public static void main (String[] args) throws IOException
	{
		BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		int n = Integer.parseInt(input.readLine());
		Work[] W = new Work[n];
		
		for (int i=0; i<n; i++)
		{
			st = new StringTokenizer(input.readLine(), " ");
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			W[i] = new Work(s, e);
		}
		
		Arrays.sort(W);
		
		int count = 1;
		int e = W[0].e;
		
		PriorityQueue<Integer> Q = new PriorityQueue<>();
		Q.add(e);
		
		for (int i=1; i<n; i++)
		{
			if ( Q.peek() > W[i].s )
				count++;
			else
				Q.poll();
				
			Q.add(W[i].e);
		}
		
		output.write(count + "");
		output.close();
	}
}
