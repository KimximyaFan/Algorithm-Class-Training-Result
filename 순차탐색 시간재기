import java.io.IOException;
import java.io.File;
import java.util.Scanner;
import java.util.ArrayList;

public class Clock 
{
	public static void main (String[] args) throws IOException // 예외처리는 main에서 throws IOException 으로 한다.
	{
		ArrayList<Integer> L = new ArrayList<>();              // 정수값을 담을 ArrayList를 선언한다.
		
		File f = new File("1.in");                             // 상대경로로 파일을 읽어온다.
		
		Scanner input = new Scanner(f);                        // 파일을 스캐너에 넣어준다.
		
		while ( input.hasNextLine() )                          // 파일의 다음 줄이 있는지 확인한다.
		{
			int temp = input.nextInt();                        // 해당 줄의 값을 정수형 temp에 할당한다.
			L.add(temp);                                       // 해당 줄의 값을 L이라는 어레이 리스트에 추가한다.
		}
		
		// ------- 최선 ----------------------------
		long start = System.currentTimeMillis();                      // 1970년대 부터 지금까지 흐른 시간을 long형으로 밀리초 단위로 받는다.
		for (int i=0; i<L.size(); i++)                                // i는 0부터 어레이리스트의 크기(10,000,001) 미만까지 증가하는 for문이다.
		{
			if ( L.get(i) == 10000000 )                               // 어레이리스트의 i 인덱스의 값이 10,000,000을 만족하는지 판단한다.
				break;                                                // 조건을 만족하면 for문을 탈출한다.
		}
		long stop = System.currentTimeMillis();                       // 탐색이 끝났을 때의 시간을 정의한다.
		double result = (double)(stop - start) / 1000;                // end-start 값을 구해서 작동시간을 구한다. 밀리초 단위이므로 1000으로 나눈다. 
		System.out.println("최선의 경우, 걸린 시간은 " + result + "초입니다.");// 값을 출력한다.
		// ----------------------------------------
		
		// ------- 평균 ----------------------------
		start = System.currentTimeMillis();                           // 시작시간을 정의한다.
		for (int i=0; i<L.size(); i++)                                // i는 0부터 어레이리스트의 크기(10,000,001) 미만까지 증가하는 for문이다.
		{
			if ( L.get(i) == 2839004 )                                // 어레이리스트의 i 인덱스의 값이 2,839,004을 만족하는지 판단한다.
				break;                                                // 조건을 만족하면 for문을 탈출한다.
		}
		stop = System.currentTimeMillis();                            // 탐색이 끝났을 때의 시간을 정의한다.
		result = (double)(stop - start) / 1000;                       // end-start 값을 구해서 작동시간을 구한다. 밀리초 단위이므로 1000으로 나눈다.
		System.out.println("평균의 경우, 걸린 시간은 " + result + "초입니다.");// 값을 출력한다.
		// ----------------------------------------
		
		// ------- 최악 ----------------------------
		start = System.currentTimeMillis();                           // 시작시간을 정의한다.
		for (int i=0; i<L.size(); i++)                                // i는 0부터 어레이리스트의 크기(10,000,001) 미만까지 증가하는 for문이다.
		{
			if ( L.get(i) ==  6896383 )                               // 어레이리스트의 i 인덱스의 값이 6,896,383을 만족하는지 판단한다.
				break;                                                // 조건을 만족하면 for문을 탈출한다.
		}
		stop = System.currentTimeMillis();                            // 탐색이 끝났을 때의 시간을 정의한다.
		result = (double)(stop - start) / 1000;                       // end-start 값을 구해서 작동시간을 구한다. 밀리초 단위이므로 1000으로 나눈다.
		System.out.println("최악의 경우, 걸린 시간은 " + result + "초입니다.");// 값을 출력한다.
		// ----------------------------------------
	}
}
