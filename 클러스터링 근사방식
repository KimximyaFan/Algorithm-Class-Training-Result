import java.io.*;
import java.util.*;

public class AAIT 
{
	public static void main (String[] args) throws IOException // 메인함수, 입출력 오류시 IOException 던짐
	{
		BufferedReader input = new BufferedReader(new InputStreamReader(System.in)); // 입력 객체
		BufferedWriter output =new BufferedWriter(new OutputStreamWriter(System.out)); // 출력 객체
		StringTokenizer st; // 문자열 나눠주는 객체 스트링토크나이저
		
		st = new StringTokenizer(input.readLine(), " "); // 첫째 줄 입력받는다. 
		
		int n = Integer.parseInt(st.nextToken()); // 토크나이저 객체로 점의 갯수 n을 정의한다.
		int k = Integer.parseInt(st.nextToken()); // 토크나이저 객체로 클러스터 갯수 k를 정의한다.
		
		ArrayList<Integer> checked = new ArrayList<>(); // 해당 점이 클러스터인지 확인 하기위한 어레이리스트, 해당 점이 클러스터이면 인덱스가 들어간다.
		
		int[] x = new int[n]; // x값을 저장할 배열 x이며, 크기는 n이다.
		int[] y = new int[n]; // y값을 저장할 배열 y이며, 크기는 n이다.
		
		for (int i=0; i<n; i++) // 점의 좌표를 입력받기 위한 포문이며, 총 n번 돌아간다.
		{
			st = new StringTokenizer(input.readLine(), " "); // 스트링토크나이저 객체로 입력을 받는다.
			
			x[i] = Integer.parseInt(st.nextToken()); // 해당 i 번째 점을 의미하며, x값을 저장한다.
			y[i] = Integer.parseInt(st.nextToken()); // 해당 i 번째 점을 의미하며, y값을 저장한다.
		}
		
		checked.add(0); // 0번 인덱스의 점을 첫 번째 점으로 잡으므로, checked 어레이리스트에 0을 넣는다.
		
		for (int i=1; i<k; i++) // 클러스터 갯수는 k개이고, 이미 0번 인덱스를 넣었으므로 i는 1부터 시작하는 포문을 돌린다.
		{
			int index = 0; // 클러스터로 확정된 인덱스를 저장하기위한 지역변수 index이며, 임시로 0으로 초기화한다.
			int d = 0; // 거리값을 저장할 변수 d
			
			for (int j=0; j<n; j++) // 모든 점에 대해서 전수조사하는 포문이다. 총 n번 돌아간다.
			{
				if (checked.contains(j) == false) // 해당 점이 클러스터 점인지 판별한다. 만약 해당 인덱스가 checked 안에 있다면 클러스터이다.
				{
					int temp = Integer.MAX_VALUE; // 거리 값을 담을 지역변수 temp를 임시로 선언한다. 후에 클러스터 집합중에서 거리가 최소인게 담기므로
					// 임시로 정수형 최댓값을 담는다.
					
					for (int m=0; m<checked.size(); m++) // 클러스터 집합에 대해서 전수조사하는 포문이며, 클러스터 집합 크기만큼 돌아간다.
					{
						int temp2 = calculate(x[checked.get(m)], y[checked.get(m)], x[j], y[j]); // 거리 값을 담을 지역변수 temp2 이다.
						// temp2는 해당 클러스터 점과, 후보 점에 대한 거리이다.
						
						if ( temp2 < temp ) // 후보점과 클러스터 집합에 대해서, 거리가 최소인 값이 담기기 위한 조건문이다.
							temp = temp2; // 만약 temp보다 작다면 temp2 값이 담긴다.
					}
					// 최종 적으로 포문을 탈출하면 temp 값에는 j 인덱스의 후보점과 클러스터집합과의 거리중 최솟값이 담긴다.
					
					if ( temp > d ) // 후보 점 집합 중에서 클러스터집합과의 거리가 최대인 점을 찾기위한 조건문이다.
					{
						d = temp; // 만약 거리가 d보다 크다면 값이 갱신되고
						index = j; // 클러스터 인덱스도 갱신된다.
					}
				}
			}
			// 최종적으로 j 에 대한 포문을 탈출하면
			// 현존하는 클러스터집합에 대해서, 후보 점 집합 중 클러스터 점이 되는 인덱스 값이 index 변수에 담겨있다.
			
			checked.add(index); // checked 어레이리스트에 index 값을 담는다.
		}
		
		Collections.sort(checked); // index를 오름차순 정렬한다.
		
		for (int i=0; i<checked.size(); i++) // 클러스터집합 크기 만큼 포문이 돌아간다. 
			output.write(x[checked.get(i)] + " " + y[checked.get(i)] + "\n"); // 해당 인덱스에 대한 x y 값을 출력한다.
		
		output.close(); // 출력 객체를 닫아준다.
	}
	
	public static int calculate (int a, int b, int x, int y) // 거리계산 함수, 점(a,b) 와 점(x, y)의 거리를 계산한다.
	{
		return Math.abs(x-a) * Math.abs(x-a) + Math.abs(y-b) * Math.abs(y-b); // (x-a)^2 + (y-b)^2 만 이용하였다. 제곱근을 굳이 안써도 된다.
	}
}
